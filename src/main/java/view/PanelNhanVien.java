/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

import entity.SendEmail;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import domainmodel.Common;
import domainmodel.NhanVien;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import service.impl.NhanVienServiceImpl;

/**
 *
 * @author Quang Huy
 */
public class PanelNhanVien extends javax.swing.JPanel implements Runnable, ThreadFactory {

    private DefaultTableModel dtm = new DefaultTableModel();
    private List<NhanVien> list = new ArrayList<>();
    private List<NhanVien> listSearch = new ArrayList<>();
    private List<NhanVien> listNV = new ArrayList<>();
    private NhanVienServiceImpl nhanVienServiceImpl = new NhanVienServiceImpl();
    private Webcam webcam = null;
    private int page = 0;
//    private WebcamPanel panel = null;
//    private Executor executor = Executors.newSingleThreadExecutor(this);

    /**
     * Creates new form PanelNhanVien
     */
    public PanelNhanVien() {
        initComponents();
        pnQLNV.setBackground(Color.white);
        pnThongTinNV.setBackground(Color.white);
        pnDanhSachNV.setBackground(Color.white);
        tbNhanVien.setBackground(Color.white);
        String[] header = {"Mã NV", "Tên NV", "Giới tính", "Ngày sinh", "Địa chỉ", "SĐT", "Email", "Trạng thái", "Chức vụ"};
        tbNhanVien.setModel(dtm);
        dtm.setColumnIdentifiers(header);
        list = nhanVienServiceImpl.getAll();
        listNV = nhanVienServiceImpl.getAllPage(0);
        showData(listNV);
        initWebcam();
        btnTrangThai.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        pnQLNV = new javax.swing.JPanel();
        pnThongTinNV = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        radioNam = new javax.swing.JRadioButton();
        radioNu = new javax.swing.JRadioButton();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        txtTen = new javax.swing.JTextField();
        txtSdt = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        radioQuanLy = new javax.swing.JRadioButton();
        radioNhanVien = new javax.swing.JRadioButton();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        txtNgaySinh = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        panelWebcam = new javax.swing.JPanel();
        qrCode = new javax.swing.JLabel();
        btnTrangThai = new javax.swing.JButton();
        pnDanhSachNV = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tbNhanVien = new javax.swing.JTable();
        jLabel54 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnImport = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnDowloadTemplate = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1300, 850));

        pnQLNV.setMaximumSize(new java.awt.Dimension(1300, 850));
        pnQLNV.setMinimumSize(new java.awt.Dimension(1300, 850));
        pnQLNV.setPreferredSize(new java.awt.Dimension(1300, 850));

        pnThongTinNV.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông Tin Nhân Viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N

        jLabel47.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel47.setText("Họ tên");

        jLabel48.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel48.setText("Giới tính");

        buttonGroup1.add(radioNam);
        radioNam.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        radioNam.setSelected(true);
        radioNam.setText("Nam");

        buttonGroup1.add(radioNu);
        radioNu.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        radioNu.setText("Nữ");

        jLabel49.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel49.setText("Ngày sinh");

        jLabel50.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel50.setText("Số điện thoại");

        jLabel51.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel51.setText("Địa Chỉ");

        jLabel52.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel52.setText("Email");

        jLabel53.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel53.setText("Chức vụ");

        txtTen.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtTen.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(40, 184, 213)));

        txtSdt.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtSdt.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(40, 184, 213)));

        txtDiaChi.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtDiaChi.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(40, 184, 213)));

        txtEmail.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtEmail.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(40, 184, 213)));

        buttonGroup2.add(radioQuanLy);
        radioQuanLy.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        radioQuanLy.setText("Quản lý");

        buttonGroup2.add(radioNhanVien);
        radioNhanVien.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        radioNhanVien.setSelected(true);
        radioNhanVien.setText("Nhân Viên");

        btnThem.setBackground(new java.awt.Color(41, 183, 212));
        btnThem.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnThem.setForeground(new java.awt.Color(255, 255, 255));
        btnThem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/addNV.png"))); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setToolTipText("Thêm nhân viên");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnSua.setBackground(new java.awt.Color(41, 183, 212));
        btnSua.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnSua.setForeground(new java.awt.Color(255, 255, 255));
        btnSua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/updateNV.png"))); // NOI18N
        btnSua.setText("Sửa");
        btnSua.setToolTipText("Sửa nhân viên");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnNew.setBackground(new java.awt.Color(41, 183, 212));
        btnNew.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnNew.setForeground(new java.awt.Color(255, 255, 255));
        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/newNV.png"))); // NOI18N
        btnNew.setText("New");
        btnNew.setToolTipText("Làm mới các trường");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        txtNgaySinh.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtNgaySinh.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(40, 184, 213)));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        panelWebcam.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addComponent(panelWebcam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(panelWebcam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 31, Short.MAX_VALUE))
        );

        qrCode.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        qrCode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/scan.png"))); // NOI18N
        qrCode.setText("QR Code scan");

        btnTrangThai.setBackground(new java.awt.Color(41, 183, 212));
        btnTrangThai.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnTrangThai.setForeground(new java.awt.Color(255, 255, 255));
        btnTrangThai.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/sathai.png"))); // NOI18N
        btnTrangThai.setText("Trạng thái");
        btnTrangThai.setToolTipText("Cập nhật trạng thái");
        btnTrangThai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTrangThaiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnThongTinNVLayout = new javax.swing.GroupLayout(pnThongTinNV);
        pnThongTinNV.setLayout(pnThongTinNVLayout);
        pnThongTinNVLayout.setHorizontalGroup(
            pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnThongTinNVLayout.createSequentialGroup()
                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnThongTinNVLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnThongTinNVLayout.createSequentialGroup()
                                    .addComponent(jLabel50)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtSdt))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnThongTinNVLayout.createSequentialGroup()
                                    .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnThongTinNVLayout.createSequentialGroup()
                                            .addComponent(radioNam)
                                            .addGap(21, 21, 21)
                                            .addComponent(radioNu))
                                        .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(pnThongTinNVLayout.createSequentialGroup()
                                .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(170, 170, 170)
                        .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnThongTinNVLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnThongTinNVLayout.createSequentialGroup()
                                        .addComponent(radioQuanLy)
                                        .addGap(54, 54, 54)
                                        .addComponent(radioNhanVien))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnThongTinNVLayout.createSequentialGroup()
                                .addComponent(jLabel51, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(34, 34, 34)
                                .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnThongTinNVLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnThongTinNVLayout.createSequentialGroup()
                                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(155, 155, 155))
                            .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addComponent(btnTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)))
                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnThongTinNVLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnThongTinNVLayout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(qrCode)))
                .addGap(279, 279, 279))
        );
        pnThongTinNVLayout.setVerticalGroup(
            pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnThongTinNVLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnThongTinNVLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnThongTinNVLayout.createSequentialGroup()
                        .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnThongTinNVLayout.createSequentialGroup()
                                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel47)
                                    .addComponent(txtTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel48)
                                    .addComponent(radioNam)
                                    .addComponent(radioNu))
                                .addGap(27, 27, 27)
                                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel49)
                                    .addComponent(txtNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel50)
                                    .addComponent(txtSdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnThongTinNVLayout.createSequentialGroup()
                                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel51)
                                    .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(qrCode))
                                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnThongTinNVLayout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnThongTinNVLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel52)))
                                .addGap(24, 24, 24)
                                .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(radioQuanLy, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel53)
                                    .addComponent(radioNhanVien))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnThongTinNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnTrangThai, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );

        pnDanhSachNV.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Danh Sách Nhân Viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 18))); // NOI18N

        tbNhanVien.setAutoCreateRowSorter(true);
        tbNhanVien.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        tbNhanVien.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tbNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã", "Họ Và Tên", "Giới Tính", "Ngày Sinh", "Số điện thoại", "Địa Chỉ", "Email", "Tình Trạng"
            }
        ));
        tbNhanVien.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbNhanVien.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tbNhanVien.setGridColor(new java.awt.Color(0, 0, 0));
        tbNhanVien.setShowGrid(false);
        tbNhanVien.getTableHeader().setReorderingAllowed(false);
        tbNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbNhanVienMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tbNhanVien);
        if (tbNhanVien.getColumnModel().getColumnCount() > 0) {
            tbNhanVien.getColumnModel().getColumn(0).setPreferredWidth(40);
            tbNhanVien.getColumnModel().getColumn(2).setPreferredWidth(30);
            tbNhanVien.getColumnModel().getColumn(3).setPreferredWidth(30);
            tbNhanVien.getColumnModel().getColumn(4).setPreferredWidth(30);
            tbNhanVien.getColumnModel().getColumn(5).setPreferredWidth(120);
            tbNhanVien.getColumnModel().getColumn(6).setPreferredWidth(80);
            tbNhanVien.getColumnModel().getColumn(7).setPreferredWidth(40);
        }

        jLabel54.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel54.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/searchNV.png"))); // NOI18N
        jLabel54.setText("Tìm kiếm");

        txtSearch.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtSearch.setToolTipText("Tìm kiếm theo mã, tên, sđt, email");
        txtSearch.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(40, 184, 213)));
        txtSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtSearchCaretUpdate(evt);
            }
        });

        btnImport.setBackground(new java.awt.Color(41, 183, 212));
        btnImport.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnImport.setForeground(new java.awt.Color(255, 255, 255));
        btnImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/import.png"))); // NOI18N
        btnImport.setText("Import");
        btnImport.setToolTipText("Nhập nhân viên");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnExport.setBackground(new java.awt.Color(41, 183, 212));
        btnExport.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnExport.setForeground(new java.awt.Color(255, 255, 255));
        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/export.png"))); // NOI18N
        btnExport.setText("Export");
        btnExport.setToolTipText("Xuất file danh sách nhân viên");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnFirst.setBackground(new java.awt.Color(41, 183, 212));
        btnFirst.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnFirst.setForeground(new java.awt.Color(255, 255, 255));
        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/first.png"))); // NOI18N
        btnFirst.setText("First");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnPrevious.setBackground(new java.awt.Color(41, 183, 212));
        btnPrevious.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnPrevious.setForeground(new java.awt.Color(255, 255, 255));
        btnPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/pre.png"))); // NOI18N
        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext.setBackground(new java.awt.Color(41, 183, 212));
        btnNext.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnNext.setForeground(new java.awt.Color(255, 255, 255));
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/next.png"))); // NOI18N
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnLast.setBackground(new java.awt.Color(41, 183, 212));
        btnLast.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnLast.setForeground(new java.awt.Color(255, 255, 255));
        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/last.png"))); // NOI18N
        btnLast.setText("Last");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });

        btnDowloadTemplate.setBackground(new java.awt.Color(41, 183, 212));
        btnDowloadTemplate.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        btnDowloadTemplate.setForeground(new java.awt.Color(255, 255, 255));
        btnDowloadTemplate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/download.png"))); // NOI18N
        btnDowloadTemplate.setToolTipText("Tải template mẫu");
        btnDowloadTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDowloadTemplateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnDanhSachNVLayout = new javax.swing.GroupLayout(pnDanhSachNV);
        pnDanhSachNV.setLayout(pnDanhSachNVLayout);
        pnDanhSachNVLayout.setHorizontalGroup(
            pnDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDanhSachNVLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(pnDanhSachNVLayout.createSequentialGroup()
                        .addComponent(jLabel54)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDowloadTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(pnDanhSachNVLayout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(btnFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnLast, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(380, Short.MAX_VALUE))
        );
        pnDanhSachNVLayout.setVerticalGroup(
            pnDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnDanhSachNVLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel54)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnDowloadTemplate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnDanhSachNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNext, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLast, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 30)); // NOI18N
        jLabel2.setText("Quản lý nhân viên");

        javax.swing.GroupLayout pnQLNVLayout = new javax.swing.GroupLayout(pnQLNV);
        pnQLNV.setLayout(pnQLNVLayout);
        pnQLNVLayout.setHorizontalGroup(
            pnQLNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnQLNVLayout.createSequentialGroup()
                .addGap(542, 542, 542)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnQLNVLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnQLNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnThongTinNV, javax.swing.GroupLayout.PREFERRED_SIZE, 1286, Short.MAX_VALUE)
                    .addComponent(pnDanhSachNV, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnQLNVLayout.setVerticalGroup(
            pnQLNVLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnQLNVLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(pnThongTinNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(pnDanhSachNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnQLNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnQLNV, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        if (txtNgaySinh.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền ngày sinh");
            return;
        }
        NhanVien nhanVien = getData();
        if (nhanVien != null) {
            NhanVien nv = nhanVienServiceImpl.getOne(nhanVien.getEmail());
            if (nv != null) {
                JOptionPane.showMessageDialog(this, "Nhân viên mang email " + nhanVien.getEmail() + " đã tồn tại!!");
            } else if (!txtNgaySinh.getText().matches("^(0?[1-9]|[12][0-9]|3[01])[-](0?[1-9]|1[012])[-][0-9]{4}$")) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập ngày sinh theo định dạng dd-mm-yyyy");
            } else {
                if (true) {
                    String check = txtNgaySinh.getText();
                    String[] a = check.split("-");
                    int nam = Integer.valueOf(a[2]);
                    if (nam < 1960 || nam > 2022) {
                        JOptionPane.showMessageDialog(this, "Năm sinh không hợp lệ!!!");
                    } else {
                        JOptionPane.showMessageDialog(this, nhanVienServiceImpl.addOrUpdate(nhanVien));
                        SendEmail.send(nhanVien.getEmail());
                        list = nhanVienServiceImpl.getAll();
                        listNV = nhanVienServiceImpl.getAllPage(0);
                        showData(listNV);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Không thành công");
        }
    }//GEN-LAST:event_btnThemActionPerformed
    private NhanVien getData() {
        String ma = "NV" + (list.size() + 1);
        String ten = (txtTen.getText());
        boolean gioiTinh;
        if (radioNam.isSelected()) {
            gioiTinh = true;
        } else {
            gioiTinh = false;
        }
        Date ngaySinh = null;
        SimpleDateFormat convertToDate = new SimpleDateFormat("dd-MM-yyyy");
        try {
            ngaySinh = convertToDate.parse(txtNgaySinh.getText());
        } catch (Exception e) {
        }
        String diaChi = (txtDiaChi.getText());
        String sdt = (txtSdt.getText());
        String email = txtEmail.getText();
        String matKhau = (getMd5("123456"));
        int trangThai = 0;
        int chucVu;
        if (radioQuanLy.isSelected()) {
            chucVu = 0;
        } else {
            chucVu = 1;
        }
        Date createdDate = (new Date());
        Date lastModifiedDate = (new Date());
        NhanVien nhanVien = new NhanVien(ma, ten, gioiTinh, ngaySinh, diaChi, sdt, email, chucVu, matKhau, trangThai, createdDate, lastModifiedDate);
        return nhanVien;
    }

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        int row = tbNhanVien.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn nhân viên để tiến hành sửa.");
        } else {
            NhanVien nv = listNV.get(row);
            NhanVien nVien = nhanVienServiceImpl.getOneByMa(nv.getMa(), txtEmail.getText());
            if (nVien != null) {
                JOptionPane.showMessageDialog(this, "Email này đã tồn tại ở nhân viên có mã: " + nVien.getMa());
            } else {
                NhanVien nhanVien = new NhanVien();
                nhanVien.setId(nv.getId());
                nhanVien.setMa(nv.getMa());
                nhanVien.setHoTen(txtTen.getText());
                if (radioNam.isSelected()) {
                    nhanVien.setGioiTinh(true);
                } else {
                    nhanVien.setGioiTinh(false);
                }
                SimpleDateFormat convertToDate = new SimpleDateFormat("dd-MM-yyyy");
                try {
                    Date date = convertToDate.parse(txtNgaySinh.getText());
                    nhanVien.setNgaySinh(date);
                } catch (Exception e) {
//                e.printStackTrace(System.out);
                }
                nhanVien.setMatKhau(nv.getMatKhau());
                nhanVien.setDiaChi(txtDiaChi.getText());
                nhanVien.setSdt(txtSdt.getText());
                nhanVien.setEmail(txtEmail.getText());
                nhanVien.setTrangThai(nv.getTrangThai());
                if (radioQuanLy.isSelected()) {
                    nhanVien.setChucVu(0);
                } else {
                    nhanVien.setChucVu(1);
                }
                nhanVien.setLastModifiedDate(new Date());
                nhanVien.setCreatedDate(nhanVien.getCreatedDate());
                JOptionPane.showMessageDialog(this, nhanVienServiceImpl.addOrUpdate(nhanVien));
                list = nhanVienServiceImpl.getAll();
                listNV = nhanVienServiceImpl.getAllPage(0);
                showData(listNV);
            }
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void txtSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtSearchCaretUpdate
        String search = txtSearch.getText();
        if (search.isEmpty()) {
            showData(listNV);
        } else {
            List<NhanVien> listSearch = nhanVienServiceImpl.search(search);
            showData(listSearch);
        }
    }//GEN-LAST:event_txtSearchCaretUpdate

    private void tbNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbNhanVienMouseClicked
        // TODO add your handling code here:
        if (txtSearch.getText().isEmpty()) {
            int row = tbNhanVien.getSelectedRow();
            NhanVien nv = listNV.get(row);
            txtTen.setText(nv.getHoTen());
            if (nv.isGioiTinh()) {
                radioNam.setSelected(true);
            } else {
                radioNu.setSelected(true);
            }
            String date;
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            date = dateFormat.format(nv.getNgaySinh());
            txtNgaySinh.setText(date);
            txtDiaChi.setText(nv.getDiaChi());
            txtSdt.setText(nv.getSdt());
            txtEmail.setText(nv.getEmail());
            if (nv.getChucVu() == 0) {
                radioQuanLy.setSelected(true);
            } else {
                radioNhanVien.setSelected(true);
            }
        } else {
            List<NhanVien> listSearch = nhanVienServiceImpl.search(txtSearch.getText());
            int row = tbNhanVien.getSelectedRow();
            NhanVien nv = listSearch.get(row);
            txtTen.setText(nv.getHoTen());
            if (nv.isGioiTinh()) {
                radioNam.setSelected(true);
            } else {
                radioNu.setSelected(true);
            }
            String date;
            DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            date = dateFormat.format(nv.getNgaySinh());
            txtNgaySinh.setText(date);
            txtDiaChi.setText(nv.getDiaChi());
            txtSdt.setText(nv.getSdt());
            txtEmail.setText(nv.getEmail());
            if (nv.getChucVu() == 0) {
                radioQuanLy.setSelected(true);
            } else {
                radioNhanVien.setSelected(true);
            }
        }
        btnTrangThai.setVisible(true);
    }//GEN-LAST:event_tbNhanVienMouseClicked

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        txtTen.setText("");
        radioNam.setSelected(true);
        txtNgaySinh.setText("");
        txtSdt.setText("");
        txtDiaChi.setText("");
        txtEmail.setText("");
        radioNhanVien.setSelected(true);
        tbNhanVien.clearSelection();
        btnTrangThai.setVisible(false);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        File file;
        FileInputStream fis = null;
        BufferedInputStream bis = null;
        XSSFWorkbook wb = null;
        String path = "D:";
        JFileChooser exChooser = new JFileChooser(path);
        int result = exChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                file = exChooser.getSelectedFile();
                String name = file.getPath();
                System.out.println(name);
                List<NhanVien> listIm = importExcel(name);
                listIm.forEach(s -> System.out.println(s.toString()));
                int i = 0;
                do {
                    for (NhanVien nhanVien : listIm) {
                        if (nhanVien.getHoTen().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin các nhân viên!!");
                            listIm.remove(nhanVien);
                        }
                        if (nhanVien.getSdt().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin các nhân viên!!");
                            listIm.remove(nhanVien);
                        }
                        if (nhanVien.getDiaChi().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin các nhân viên!!");
                            listIm.remove(nhanVien);
                        }
                        if (nhanVien.getEmail().isEmpty()) {
                            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin các nhân viên!!");
                            listIm.remove(nhanVien);
                        }
                        if (!convertDate(nhanVien.getNgaySinh()).matches("^([0-2][0-9]|(3)[0-1])(\\-)(((0)[0-9])|((1)[0-2]))(\\-)\\d{4}$")) {
                            JOptionPane.showMessageDialog(this, "Vui lòng nhập ngày sinh theo định dạng dd-mm-yyyy");
                            listIm.remove(nhanVien);
                        }
                        if (!nhanVien.getEmail().matches("\\b[\\w.%-]+@[-.\\w]+\\.[A-Za-z]{2,4}\\b")) {
                            JOptionPane.showMessageDialog(this, "Vui lòng nhập email đúng định dạng!!");
                            listIm.remove(nhanVien);
                        }
                        if (list.size() < 1) {
                            nhanVienServiceImpl.addOrUpdate(nhanVien);
                            SendEmail.send(nhanVien.getEmail());
                            i += listIm.size();
                        } else {
                            if (nhanVienServiceImpl.getOne(nhanVien.getEmail()) != null) {
                                JOptionPane.showMessageDialog(this, "Nhân viên có email " + nhanVien.getEmail() + " đã tồn tại!!");
                                listIm.remove(nhanVien);
                                return;
                            } else {
                                nhanVienServiceImpl.addOrUpdate(nhanVien);
                                SendEmail.send(nhanVien.getEmail());
                                i += listIm.size();
                            }
                        }
                    }

                } while (i < listIm.size());
                JOptionPane.showMessageDialog(this, "Import thành công");
                listNV = nhanVienServiceImpl.getAll();
                list = nhanVienServiceImpl.getAllPage(0);
                showData(list);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Import thất bại");
            }
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        if (txtSearch.getText().isEmpty()) {
            try {
                XSSFWorkbook workbook = new XSSFWorkbook();
                XSSFSheet spreadsheet = workbook.createSheet("NhanVien");

                XSSFRow row = null;
                Cell cell = null;

                Font headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 14);
                headerFont.setColor(IndexedColors.RED.getIndex());
                CellStyle headerCellStyle = workbook.createCellStyle();
                headerCellStyle.setFont(headerFont);

                Font tieuDe = workbook.createFont();
                tieuDe.setBold(true);
                tieuDe.setFontHeightInPoints((short) 18);
                tieuDe.setColor(IndexedColors.BLACK.getIndex());
                CellStyle tieuDeStyle = workbook.createCellStyle();
                tieuDeStyle.setFont(tieuDe);

                row = spreadsheet.createRow((short) 2);
                row.setHeight((short) 500);
                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue("     Danh sách nhân viên");
                cell.setCellStyle(tieuDeStyle);
                row = spreadsheet.createRow((short) 3);
                row.setHeight((short) 500);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("STT");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue("Mã NV");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue("Tên");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue("Giới tính");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue("Ngày sinh");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue("Địa chỉ");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue("Số điện thoại");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue("Email");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(8, CellType.STRING);
                cell.setCellValue("Chức vụ");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(9, CellType.STRING);
                cell.setCellValue("Trạng thái");
                cell.setCellStyle(headerCellStyle);
                for (int i = 0; i < list.size(); i++) {
                    NhanVien nv = list.get(i);
                    row = spreadsheet.createRow((short) 4 + i);
                    row.setHeight((short) 400);
                    row.createCell(0).setCellValue(i + 1);
                    row.createCell(1).setCellValue(nv.getMa());
                    row.createCell(2).setCellValue(nv.getHoTen());
                    String gioiTinh;
                    if (nv.isGioiTinh()) {
                        gioiTinh = "Nam";
                    } else {
                        gioiTinh = "Nữ";
                    }
                    row.createCell(3).setCellValue(gioiTinh);
                    DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                    String date = dateFormat.format(nv.getNgaySinh());
                    row.createCell(4).setCellValue(date);
                    row.createCell(5).setCellValue(nv.getDiaChi());
                    row.createCell(6).setCellValue(nv.getSdt());
                    row.createCell(7).setCellValue(nv.getEmail());
                    row.createCell(8).setCellValue(nv.getChucVu() == 0 ? "Quản lý" : "Nhân viên");
                    row.createCell(9).setCellValue(nv.getTrangThai() == 0 ? "Đang làm việc" : "Đã nghỉ việc");
                }
                FileOutputStream out = new FileOutputStream(new File("D:/NhanVien.xlsx"));
                workbook.write(out);
                out.close();
                JOptionPane.showMessageDialog(this, "Export nhân viên thành công");
                Desktop desktop = Desktop.getDesktop();
                if (new File("D:/NhanVien.xlsx").exists()) {
                    desktop.open(new File("D:/NhanVien.xlsx"));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Export nhân viên thất bại");
            }
        } else {
            try {
                XSSFWorkbook workbook = new XSSFWorkbook();
                XSSFSheet spreadsheet = workbook.createSheet("NhanVien");

                XSSFRow row = null;
                Cell cell = null;

                Font headerFont = workbook.createFont();
                headerFont.setBold(true);
                headerFont.setFontHeightInPoints((short) 14);
                headerFont.setColor(IndexedColors.RED.getIndex());
                CellStyle headerCellStyle = workbook.createCellStyle();
                headerCellStyle.setFont(headerFont);

                Font tieuDe = workbook.createFont();
                tieuDe.setBold(true);
                tieuDe.setFontHeightInPoints((short) 18);
                tieuDe.setColor(IndexedColors.BLACK.getIndex());
                CellStyle tieuDeStyle = workbook.createCellStyle();
                tieuDeStyle.setFont(tieuDe);

                row = spreadsheet.createRow((short) 2);
                row.setHeight((short) 500);
                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue("     Danh sách nhân viên");
                cell.setCellStyle(tieuDeStyle);
                row = spreadsheet.createRow((short) 3);
                row.setHeight((short) 500);
                cell = row.createCell(0, CellType.STRING);
                cell.setCellValue("STT");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(1, CellType.STRING);
                cell.setCellValue("Mã NV");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(2, CellType.STRING);
                cell.setCellValue("Tên");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(3, CellType.STRING);
                cell.setCellValue("Giới tính");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(4, CellType.STRING);
                cell.setCellValue("Ngày sinh");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(5, CellType.STRING);
                cell.setCellValue("Địa chỉ");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(6, CellType.STRING);
                cell.setCellValue("Số điện thoại");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(7, CellType.STRING);
                cell.setCellValue("Email");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(8, CellType.STRING);
                cell.setCellValue("Chức vụ");
                cell.setCellStyle(headerCellStyle);
                cell = row.createCell(9, CellType.STRING);
                cell.setCellValue("Trạng thái");
                cell.setCellStyle(headerCellStyle);
                listSearch = nhanVienServiceImpl.search(txtSearch.getText());
                for (int i = 0; i < listSearch.size(); i++) {
                    NhanVien nv = listSearch.get(i);
                    row = spreadsheet.createRow((short) 4 + i);
                    row.setHeight((short) 400);
                    row.createCell(0).setCellValue(i + 1);
                    row.createCell(1).setCellValue(nv.getMa());
                    row.createCell(2).setCellValue(nv.getHoTen());
                    String gioiTinh;
                    if (nv.isGioiTinh()) {
                        gioiTinh = "Nam";
                    } else {
                        gioiTinh = "Nữ";
                    }
                    row.createCell(3).setCellValue(gioiTinh);
                    DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
                    String date = dateFormat.format(nv.getNgaySinh());
                    row.createCell(4).setCellValue(date);
                    row.createCell(5).setCellValue(nv.getDiaChi());
                    row.createCell(6).setCellValue(nv.getSdt());
                    row.createCell(7).setCellValue(nv.getEmail());
                    row.createCell(8).setCellValue(nv.getChucVu() == 0 ? "Quản lý" : "Nhân viên");
                    row.createCell(9).setCellValue(nv.getTrangThai() == 0 ? "Đang làm việc" : "Đã nghỉ việc");
                }
                FileOutputStream out = new FileOutputStream(new File("D:/NhanVien.xlsx"));
                workbook.write(out);
                out.close();
                JOptionPane.showMessageDialog(this, "Export nhân viên thành công");
                Desktop desktop = Desktop.getDesktop();
                if (new File("D:/NhanVien.xlsx").exists()) {
                    desktop.open(new File("D:/NhanVien.xlsx"));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Export nhân viên thất bại");
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        listNV = nhanVienServiceImpl.getAllPage(0);
        page = 0;
        showData(listNV);
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        page = page - 10;
        if (page < 0) {
            page = list.size() - (list.size() % 10);
        }
        listNV = nhanVienServiceImpl.getAllPage(page);
        showData(listNV);
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        page = page + 10;
        if (page > list.size()) {
            page = 0;
        }
        listNV = nhanVienServiceImpl.getAllPage(page);
        showData(listNV);
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        page = list.size() - (list.size() % 10);
        listNV = nhanVienServiceImpl.getAllPage(page);
        showData(listNV);
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnDowloadTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDowloadTemplateActionPerformed
        // TODO add your handling code here:
        try {
            XSSFWorkbook workbook = new XSSFWorkbook();
            XSSFSheet spreadsheet = workbook.createSheet("NhanVien");

            XSSFRow row = null;
            Cell cell = null;

            Font headerFont = workbook.createFont();
            headerFont.setBold(true);
            headerFont.setFontHeightInPoints((short) 10);
            headerFont.setColor(IndexedColors.RED.getIndex());
            CellStyle headerCellStyle = workbook.createCellStyle();
            headerCellStyle.setFont(headerFont);

            row = spreadsheet.createRow((short) 0);
            cell = row.createCell(0, CellType.STRING);
            cell.setCellValue("Tên");
            cell.setCellStyle(headerCellStyle);
            cell = row.createCell(1, CellType.STRING);
            cell.setCellValue("Giới tính");
            cell.setCellStyle(headerCellStyle);
            cell = row.createCell(2, CellType.STRING);
            cell.setCellValue("Ngày sinh");
            cell.setCellStyle(headerCellStyle);
            cell = row.createCell(3, CellType.STRING);
            cell.setCellValue("Địa chỉ");
            cell.setCellStyle(headerCellStyle);
            cell = row.createCell(4, CellType.STRING);
            cell.setCellValue("Số ĐT");
            cell.setCellStyle(headerCellStyle);
            cell = row.createCell(5, CellType.STRING);
            cell.setCellValue("Email");
            cell.setCellStyle(headerCellStyle);
            cell = row.createCell(6, CellType.STRING);
            cell.setCellValue("Chức vụ");
            cell.setCellStyle(headerCellStyle);
            FileOutputStream out = new FileOutputStream(new File("D:/ImportNhanVien.xlsx"));
            workbook.write(out);
            out.close();
            JOptionPane.showMessageDialog(this, "Template mẫu được lưu tại ổ D");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Tải thất bại");
        }
    }//GEN-LAST:event_btnDowloadTemplateActionPerformed

    private void btnTrangThaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTrangThaiActionPerformed
        int row = tbNhanVien.getSelectedRow();
        NhanVien nv = listNV.get(row);
        if (nv.getTrangThai() == 0) {
            int update = JOptionPane.showConfirmDialog(this, "Bạn có muốn cập nhật trạng thái của " + nv.getMa() + " thành: Đã nghỉ việc không?", "Nghỉ việc!!", 2);
            if (update == 0) {
                NhanVien nhanVien = new NhanVien();
                nhanVien.setId(nv.getId());
                nhanVien.setMa(nv.getMa());
                nhanVien.setHoTen(nv.getHoTen());
                nhanVien.setGioiTinh(nv.isGioiTinh());
                nhanVien.setNgaySinh(nv.getNgaySinh());
                nhanVien.setMatKhau(nv.getMatKhau());
                nhanVien.setDiaChi(nv.getDiaChi());
                nhanVien.setSdt(nv.getSdt());
                nhanVien.setEmail(nv.getEmail());
                nhanVien.setTrangThai(1);
                nhanVien.setChucVu(nv.getChucVu());
                nhanVien.setLastModifiedDate(new Date());
                nhanVien.setCreatedDate(nhanVien.getCreatedDate());
                nhanVienServiceImpl.addOrUpdate(nhanVien);
                listNV = nhanVienServiceImpl.getAllPage(0);
                showData(listNV);
                tbNhanVien.removeRowSelectionInterval(row, row);
                btnTrangThai.setVisible(false);
                txtTen.setText("");
                radioNam.setSelected(true);
                txtNgaySinh.setText("");
                txtSdt.setText("");
                txtDiaChi.setText("");
                txtEmail.setText("");
                radioNhanVien.setSelected(true);
            }
        } else {
            int update = JOptionPane.showConfirmDialog(this, "Bạn có muốn cập nhật trạng thái của " + nv.getMa() + " thành: Đang làm việc không?", "Quay lại làm việc!!", 2);
            if (update == 0) {
                NhanVien nhanVien = new NhanVien();
                nhanVien.setId(nv.getId());
                nhanVien.setMa(nv.getMa());
                nhanVien.setHoTen(nv.getHoTen());
                nhanVien.setGioiTinh(nv.isGioiTinh());
                nhanVien.setNgaySinh(nv.getNgaySinh());
                nhanVien.setMatKhau(nv.getMatKhau());
                nhanVien.setDiaChi(nv.getDiaChi());
                nhanVien.setSdt(nv.getSdt());
                nhanVien.setEmail(nv.getEmail());
                nhanVien.setTrangThai(0);
                nhanVien.setChucVu(nv.getChucVu());
                nhanVien.setLastModifiedDate(new Date());
                nhanVien.setCreatedDate(nhanVien.getCreatedDate());
                nhanVienServiceImpl.addOrUpdate(nhanVien);
                listNV = nhanVienServiceImpl.getAllPage(0);
                showData(listNV);
                btnTrangThai.setVisible(false);
                txtTen.setText("");
                radioNam.setSelected(true);
                txtNgaySinh.setText("");
                txtSdt.setText("");
                txtDiaChi.setText("");
                txtEmail.setText("");
                radioNhanVien.setSelected(true);
            }
        }
        btnTrangThai.setVisible(false);
        tbNhanVien.clearSelection();
    }//GEN-LAST:event_btnTrangThaiActionPerformed
    private String convertDate(Date ngaySinh) {
        String date;
        DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        date = dateFormat.format(ngaySinh);
        return date;
    }

    private void showData(List<NhanVien> list) {
        dtm.setRowCount(0);
        for (NhanVien nhanVien : list) {
            dtm.addRow(nhanVien.toDataRow());
        }
    }

    public String getMd5(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] messageDigest = md.digest(input.getBytes());
            BigInteger no = new BigInteger(1, messageDigest);
            String hashtext = no.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    private void initWebcam() {
        WebcamPanel panel = null;
        Executor executor = Executors.newSingleThreadExecutor(this);
        Dimension size = WebcamResolution.QVGA.getSize();
        webcam = Webcam.getWebcams().get(0); //0 is default webcam
        webcam.setViewSize(size);
        Common.webcam = webcam;
        System.out.println("aaaaaa");
        panel = new WebcamPanel(webcam);
        panel.setPreferredSize(size);
        panel.setFPSDisplayed(true);
        panelWebcam.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 235, 150));
        executor.execute(this);
    }

    private List<NhanVien> importExcel(String fileName) throws IOException {
        List<NhanVien> listNVien = new ArrayList<>();
        try {
            FileInputStream file = new FileInputStream(new File(fileName));
            Workbook workbook = new XSSFWorkbook(file);
            Sheet worksheet = workbook.getSheetAt(0);
            Iterator<Row> iterator = worksheet.iterator();
            Row firstRow = iterator.next();
            while (iterator.hasNext()) {
                Row currentRow = iterator.next();
                listNV = nhanVienServiceImpl.getAll();
                NhanVien nhanVien = new NhanVien();
                nhanVien.setMa("NV" + ((listNV.size() + 1) + (listNVien.size())));
                nhanVien.setHoTen(String.valueOf(getCellValue(currentRow.getCell(0))).trim());
                boolean gioiTinh;
                if (String.valueOf(getCellValue(currentRow.getCell(1))).trim().equalsIgnoreCase("Nam")) {
                    gioiTinh = true;
                } else {
                    gioiTinh = false;
                }
                nhanVien.setGioiTinh(gioiTinh);
                SimpleDateFormat convertToDate = new SimpleDateFormat("dd-MM-yyyy");
                try {
                    Date date = convertToDate.parse(String.valueOf(getCellValue(currentRow.getCell(2))).trim());
                    nhanVien.setNgaySinh(date);
                } catch (Exception e) {
//                    e.printStackTrace(System.out);
                }
                nhanVien.setDiaChi(String.valueOf(getCellValue(currentRow.getCell(3))).trim());
                nhanVien.setSdt(String.valueOf(getCellValue(currentRow.getCell(4))).trim());
                nhanVien.setEmail(String.valueOf(getCellValue(currentRow.getCell(5))).trim());
                if (String.valueOf(getCellValue(currentRow.getCell(6))).trim().equalsIgnoreCase("Quản lý")) {
                    nhanVien.setChucVu(0);
                } else {
                    nhanVien.setChucVu(1);
                }
                nhanVien.setMatKhau(getMd5("123456"));
                nhanVien.setTrangThai(0);
                nhanVien.setCreatedDate(new Date());
                nhanVien.setLastModifiedDate(new Date());
                listNVien.add(nhanVien);
            }
        } catch (IOException e) {
//            e.printStackTrace(System.out);
        }
        return listNVien;
    }

    private static Object getCellValue(Cell cell) {
        try {
            switch (cell.getCellType()) {
                case NUMERIC -> {
                    return cell.getNumericCellValue();
                }
                case BOOLEAN -> {
                    return cell.getBooleanCellValue();
                }
                default -> {
                    return cell.getStringCellValue();
                }

            }
        } catch (Exception e) {
            return "";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDowloadTemplate;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTrangThai;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel panelWebcam;
    private javax.swing.JPanel pnDanhSachNV;
    private javax.swing.JPanel pnQLNV;
    private javax.swing.JPanel pnThongTinNV;
    private javax.swing.JLabel qrCode;
    private javax.swing.JRadioButton radioNam;
    private javax.swing.JRadioButton radioNhanVien;
    private javax.swing.JRadioButton radioNu;
    private javax.swing.JRadioButton radioQuanLy;
    private javax.swing.JTable tbNhanVien;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNgaySinh;
    private javax.swing.JTextField txtSdt;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTen;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        do {
            try {
                Thread.sleep(2500);
            } catch (InterruptedException e) {
//                e.printStackTrace();
            }

            Result result = null;
            BufferedImage image = null;

            if (webcam.isOpen()) {
                if ((image = webcam.getImage()) == null) {
                    continue;
                }
            }
            LuminanceSource source = new BufferedImageLuminanceSource(image);
            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

            try {
                result = new MultiFormatReader().decode(bitmap);
            } catch (NotFoundException e) {
                //No result...
            }

            if (result != null) {
                try {
                    List<String> listt = new ArrayList<>();
                    System.out.println(result);
                    String ttt = result.toString();
                    String[] a = ttt.split("-");
                    String date = a[2].substring(0, 2) + "-" + a[2].substring(2, 4) + "-" + a[2].substring(4);
                    txtTen.setText(a[1]);
                    txtNgaySinh.setText(date);
                    if (a[3].equalsIgnoreCase("Nam")) {
                        radioNam.setSelected(true);
                    } else {
                        radioNu.setSelected(true);
                    }
                    txtDiaChi.setText(a[4]);
                } catch (Exception e) {
                }
            }
        } while (true);
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);
        return t;
    }
}
